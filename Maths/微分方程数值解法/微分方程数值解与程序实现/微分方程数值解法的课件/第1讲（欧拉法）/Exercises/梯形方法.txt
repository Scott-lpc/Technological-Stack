//梯形方法

#include "stdafx.h"
#include<math.h>
#include<stdio.h>
#include<stdlib.h>
void main( )
{
  double a,b,dx,epsilon,y_initial,y_new;
  int i,k,N,kmax;
  double f(double x, double y);
  double exact(double x);
  double *x;
  double *y;


  a=0.0;
  b=0.1;
  N=5;
  dx=(b-a)/N;
  epsilon=1e-6;
  kmax=1000000;
  x=(double *)malloc(sizeof(double)*(N+1));
  y=(double *)malloc(sizeof(double)*(N+1));
  y[0]=1.0;
  for(i=0;i<=N;i++)
    x[i]=a+i*dx;
  for(i=0;i<N;i++)
  {
	  k=0;  //k为迭代计数器
	  y_initial=y[i]+dx*f(x[i],y[i]);
	  do
          {
           if(k!=0) y_initial=y_new;
           y_new=y[i]+dx*(f(x[i],y[i])+f(x[i]+dx,y_initial))/2.0;
           k=k+1;	   
	  }
          while((fabs(y_initial-y_new)>epsilon)&(k<kmax));
	  if(k==kmax) 
	  {
		  printf("iternative number exceed!\n");
		  break;
	  }
	  else 
		  y[i+1]=y_new; 
	  printf("k=%d  ",k);
  }
  printf("\n");
  for(i=0;i<=N;i++)	      
      printf("x=%.2f,   numerical=%.6f,  exact=%.6f,   error=%.6f\n",x[i],y[i],exact(x[i]),fabs(y[i]-exact(x[i])));
  free(x);
  free(y);
}

double f(double x, double y)
{
  double z;
  z=-0.9*y/(1+2*x);
  return z;
}

double exact(double x)
{
  double z;
  z=pow((1.0+2*x),-0.45);
  return z;
}
 